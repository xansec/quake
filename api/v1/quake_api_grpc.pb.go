// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: quake_api.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QuakeServiceClient is the client API for QuakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuakeServiceClient interface {
	// Get list of earthquakes for given period (like past day) and magnitude.
	ListEarthquakes(ctx context.Context, in *ListEarthquakesRequest, opts ...grpc.CallOption) (*ListEarthquakesResponse, error)
	// Get earthquake by id.
	GetEarthquake(ctx context.Context, in *GetEarthquakeRequest, opts ...grpc.CallOption) (*GetEarthquakeResponse, error)
}

type quakeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuakeServiceClient(cc grpc.ClientConnInterface) QuakeServiceClient {
	return &quakeServiceClient{cc}
}

func (c *quakeServiceClient) ListEarthquakes(ctx context.Context, in *ListEarthquakesRequest, opts ...grpc.CallOption) (*ListEarthquakesResponse, error) {
	out := new(ListEarthquakesResponse)
	err := c.cc.Invoke(ctx, "/quake.api.v1.QuakeService/ListEarthquakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quakeServiceClient) GetEarthquake(ctx context.Context, in *GetEarthquakeRequest, opts ...grpc.CallOption) (*GetEarthquakeResponse, error) {
	out := new(GetEarthquakeResponse)
	err := c.cc.Invoke(ctx, "/quake.api.v1.QuakeService/GetEarthquake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuakeServiceServer is the server API for QuakeService service.
// All implementations must embed UnimplementedQuakeServiceServer
// for forward compatibility
type QuakeServiceServer interface {
	// Get list of earthquakes for given period (like past day) and magnitude.
	ListEarthquakes(context.Context, *ListEarthquakesRequest) (*ListEarthquakesResponse, error)
	// Get earthquake by id.
	GetEarthquake(context.Context, *GetEarthquakeRequest) (*GetEarthquakeResponse, error)
	mustEmbedUnimplementedQuakeServiceServer()
}

// UnimplementedQuakeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuakeServiceServer struct {
}

func (UnimplementedQuakeServiceServer) ListEarthquakes(context.Context, *ListEarthquakesRequest) (*ListEarthquakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEarthquakes not implemented")
}
func (UnimplementedQuakeServiceServer) GetEarthquake(context.Context, *GetEarthquakeRequest) (*GetEarthquakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEarthquake not implemented")
}
func (UnimplementedQuakeServiceServer) mustEmbedUnimplementedQuakeServiceServer() {}

// UnsafeQuakeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuakeServiceServer will
// result in compilation errors.
type UnsafeQuakeServiceServer interface {
	mustEmbedUnimplementedQuakeServiceServer()
}

func RegisterQuakeServiceServer(s grpc.ServiceRegistrar, srv QuakeServiceServer) {
	s.RegisterService(&QuakeService_ServiceDesc, srv)
}

func _QuakeService_ListEarthquakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEarthquakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuakeServiceServer).ListEarthquakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quake.api.v1.QuakeService/ListEarthquakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuakeServiceServer).ListEarthquakes(ctx, req.(*ListEarthquakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuakeService_GetEarthquake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEarthquakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuakeServiceServer).GetEarthquake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/quake.api.v1.QuakeService/GetEarthquake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuakeServiceServer).GetEarthquake(ctx, req.(*GetEarthquakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuakeService_ServiceDesc is the grpc.ServiceDesc for QuakeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuakeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quake.api.v1.QuakeService",
	HandlerType: (*QuakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListEarthquakes",
			Handler:    _QuakeService_ListEarthquakes_Handler,
		},
		{
			MethodName: "GetEarthquake",
			Handler:    _QuakeService_GetEarthquake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quake_api.proto",
}
