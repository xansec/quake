// Copyright 2020 Navibyte (https://navibyte.com). All rights reserved.
// Use of this source code is governed by a MIT-style license, see the LICENSE.

// Schema documentation contains snippets from:
// https://earthquake.usgs.gov/data/comcat/data-eventterms.php
// https://earthquake.usgs.gov/data/comcat/data-metadata.php
// https://earthquake.usgs.gov/data/pager/background.php

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: quake.proto

package __

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Alert according to https://earthquake.usgs.gov/data/pager/background.php
type Alert int32

const (
	Alert_ALERT_UNSPECIFIED Alert = 0
	// The suggested levels of response: international.
	Alert_ALERT_RED Alert = 1
	// The suggested levels of response: national.
	Alert_ALERT_ORANGE Alert = 2
	// The suggested levels of response: local/regional.
	Alert_ALERT_YELLOW Alert = 3
	// The suggested levels of response: no response needed.
	Alert_ALERT_GREEN Alert = 4
)

// Enum value maps for Alert.
var (
	Alert_name = map[int32]string{
		0: "ALERT_UNSPECIFIED",
		1: "ALERT_RED",
		2: "ALERT_ORANGE",
		3: "ALERT_YELLOW",
		4: "ALERT_GREEN",
	}
	Alert_value = map[string]int32{
		"ALERT_UNSPECIFIED": 0,
		"ALERT_RED":         1,
		"ALERT_ORANGE":      2,
		"ALERT_YELLOW":      3,
		"ALERT_GREEN":       4,
	}
)

func (x Alert) Enum() *Alert {
	p := new(Alert)
	*p = x
	return p
}

func (x Alert) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Alert) Descriptor() protoreflect.EnumDescriptor {
	return file_quake_proto_enumTypes[0].Descriptor()
}

func (Alert) Type() protoreflect.EnumType {
	return &file_quake_proto_enumTypes[0]
}

func (x Alert) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Alert.Descriptor instead.
func (Alert) EnumDescriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{0}
}

// USGS docs: "Status indicates whether the event has been reviewed by a human".
type Status int32

const (
	Status_STATUS_UNSPECIFIED Status = 0
	// USGS docs: "Automatic events are directly posted by automatic processing systems".
	Status_STATUS_AUTOMATIC Status = 1
	// USGS docs: "Reviewed events have been looked at by a human".
	Status_STATUS_REVIEWED Status = 2
	Status_STATUS_DELETED  Status = 3
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "STATUS_AUTOMATIC",
		2: "STATUS_REVIEWED",
		3: "STATUS_DELETED",
	}
	Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"STATUS_AUTOMATIC":   1,
		"STATUS_REVIEWED":    2,
		"STATUS_DELETED":     3,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_quake_proto_enumTypes[1].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_quake_proto_enumTypes[1]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{1}
}

// USGS docs: "Type indicates the type of a seismic event".
type Type int32

const (
	Type_TYPE_UNSPECIFIED Type = 0
	Type_TYPE_EARTHQUAKE  Type = 1
	Type_TYPE_QUARRY      Type = 2
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_EARTHQUAKE",
		2: "TYPE_QUARRY",
	}
	Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_EARTHQUAKE":  1,
		"TYPE_QUARRY":      2,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Type) Descriptor() protoreflect.EnumDescriptor {
	return file_quake_proto_enumTypes[2].Descriptor()
}

func (Type) Type() protoreflect.EnumType {
	return &file_quake_proto_enumTypes[2]
}

func (x Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Type.Descriptor instead.
func (Type) EnumDescriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{2}
}

// EarthquakeCollection represents a feature collection of earthquakes based on
// the "GeoJSON Summary Format" of the USGS Earthquake Hazards program.
type EarthquakeCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata for a set of earthquakes.
	Metadata *EarthquakeMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Bounds for a set of earthquakes as geographical bounding box.
	Bounds *GeoBoundsE7 `protobuf:"bytes,2,opt,name=bounds,proto3" json:"bounds,omitempty"`
	// Features contains a list of Earthquake objects.
	Features []*Earthquake `protobuf:"bytes,3,rep,name=features,proto3" json:"features,omitempty"`
}

func (x *EarthquakeCollection) Reset() {
	*x = EarthquakeCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarthquakeCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarthquakeCollection) ProtoMessage() {}

func (x *EarthquakeCollection) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarthquakeCollection.ProtoReflect.Descriptor instead.
func (*EarthquakeCollection) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{0}
}

func (x *EarthquakeCollection) GetMetadata() *EarthquakeMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EarthquakeCollection) GetBounds() *GeoBoundsE7 {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *EarthquakeCollection) GetFeatures() []*Earthquake {
	if x != nil {
		return x.Features
	}
	return nil
}

// Earthquake feature with position (point geometry) and some key properties.
type Earthquake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// USGS docs: "A (generally) two-character network identifier with a (generally)
	// eight-character network-assigned code. A unique identifier for the event.
	// This is the current preferred id for the event, and may change over time".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// USGS docs: "The coordinates of the epicenter in the WGS84 reference frame and
	// the depth where the earthquake begins to rupture".
	Position *GeoPointE7 `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// USGS docs: "The magnitude for the event". Typical value range is [-1.0, 10.0].
	// GeoJSON property: "mag".
	Magnitude float32 `protobuf:"fixed32,3,opt,name=magnitude,proto3" json:"magnitude,omitempty"`
	// USGS docs: "Textual description of named geographic region near to the event".
	Place string `protobuf:"bytes,4,opt,name=place,proto3" json:"place,omitempty"`
	// USGS docs: "Time (seconds) when the event occurred".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	Time int64 `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`
	// USGS docs: "Time (seconds) when the event was most recently updated".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	// GeoJSON property: "updated".
	UpdatedTime int64 `protobuf:"varint,6,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
	// USGS docs: "Timezone offset from UTC in minutes at the event epicenter".
	// GeoJSON property: "tz".
	TimezoneOffset int32 `protobuf:"zigzag32,7,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	// USGS docs: "The suggested level of response".
	Alert Alert `protobuf:"varint,8,opt,name=alert,proto3,enum=quake.api.v1.Alert" json:"alert,omitempty"`
	// USGS docs: "A number describing how significant the event is. Larger numbers indicate
	// a more significant event". Typical value range is [0, 1000].
	// GeoJSON property: "sig".
	Significance int32 `protobuf:"varint,9,opt,name=significance,proto3" json:"significance,omitempty"`
	// Detailed information when available. Note that this field can be null.
	Details *EarthquakeDetails `protobuf:"bytes,10,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Earthquake) Reset() {
	*x = Earthquake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Earthquake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Earthquake) ProtoMessage() {}

func (x *Earthquake) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Earthquake.ProtoReflect.Descriptor instead.
func (*Earthquake) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{1}
}

func (x *Earthquake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Earthquake) GetPosition() *GeoPointE7 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *Earthquake) GetMagnitude() float32 {
	if x != nil {
		return x.Magnitude
	}
	return 0
}

func (x *Earthquake) GetPlace() string {
	if x != nil {
		return x.Place
	}
	return ""
}

func (x *Earthquake) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Earthquake) GetUpdatedTime() int64 {
	if x != nil {
		return x.UpdatedTime
	}
	return 0
}

func (x *Earthquake) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

func (x *Earthquake) GetAlert() Alert {
	if x != nil {
		return x.Alert
	}
	return Alert_ALERT_UNSPECIFIED
}

func (x *Earthquake) GetSignificance() int32 {
	if x != nil {
		return x.Significance
	}
	return 0
}

func (x *Earthquake) GetDetails() *EarthquakeDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

// Earthquake detailed properties.
type EarthquakeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// USGS docs: "A (generally) two-character network identifier with a (generally)
	// eight-character network-assigned code. A unique identifier for the event.
	// This is the current preferred id for the event, and may change over time".
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// USGS docs: "Link to USGS Event Page for event".
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// USGS docs: "Link to GeoJSON detail feed from a GeoJSON summary feed".
	// GeoJSON property: "detail".
	DetailFeedUrl string `protobuf:"bytes,3,opt,name=detail_feed_url,json=detailFeedUrl,proto3" json:"detail_feed_url,omitempty"`
	// USGS docs: "The total number of felt reports submitted to the DYFI? system".
	// Typical values: [44, 843].
	Felt int32 `protobuf:"varint,4,opt,name=felt,proto3" json:"felt,omitempty"`
	// USGS docs: "The maximum reported intensity for the event. Computed by DYFI".
	// Typical value range is [0.0, 10.0].
	// GeoJSON property: "cdi".
	ReportedIntensity float32 `protobuf:"fixed32,5,opt,name=reported_intensity,json=reportedIntensity,proto3" json:"reported_intensity,omitempty"`
	// USGS docs: "The maximum estimated instrumental intensity for the event.
	// Computed by ShakeMap". Typical value range is [0.0, 10.0].
	// GeoJSON property: "mmi".
	EstimatedIntensity float32 `protobuf:"fixed32,6,opt,name=estimated_intensity,json=estimatedIntensity,proto3" json:"estimated_intensity,omitempty"`
	// USGS docs: "Status indicates whether the event has been reviewed by a human".
	Status Status `protobuf:"varint,7,opt,name=status,proto3,enum=quake.api.v1.Status" json:"status,omitempty"`
	// USGS docs: "True for large events in oceanic regions, false otherwise. Does not
	// indicate if a tsunami actually did or will exist".
	Tsunami bool `protobuf:"varint,8,opt,name=tsunami,proto3" json:"tsunami,omitempty"`
	// USGS docs: "The ID of a data contributor. Identifies the network considered to be
	// the preferred source of information for this event". Typical values:
	// ak, at, ci, hv, ld, mb, nc, nm, nn, pr, pt, se, us, uu, uw.
	// GeoJSON property: "net".
	Network string `protobuf:"bytes,9,opt,name=network,proto3" json:"network,omitempty"`
	// USGS docs: "An identifying code assigned by - and unique from - the corresponding
	// source for the event". Typical values: "2013lgaz", "c000f1jy", "71935551".
	Code string `protobuf:"bytes,10,opt,name=code,proto3" json:"code,omitempty"`
	// USGS docs: "A comma-separated list of event ids that are associated to an event".
	// Typical values: ",ci15296281,us2013mqbd,at00mji9pf,".
	Ids string `protobuf:"bytes,11,opt,name=ids,proto3" json:"ids,omitempty"`
	// USGS docs: "A comma-separated list of network contributors".
	// Typical values: ",us,nc,ci,".
	Sources string `protobuf:"bytes,12,opt,name=sources,proto3" json:"sources,omitempty"`
	// USGS docs: "A comma-separated list of product types associated to this event".
	// Typical values: “,cap,dyfi,general-link,origin,p-wave-travel-times,phase-data,”.
	// GeoJSON property: "types".
	ProductTypes string `protobuf:"bytes,13,opt,name=product_types,json=productTypes,proto3" json:"product_types,omitempty"`
	// USGS docs: "The total number of seismic stations used to determine
	// earthquake location".
	Nst int32 `protobuf:"varint,14,opt,name=nst,proto3" json:"nst,omitempty"`
	// USGS docs: "Horizontal distance from the epicenter to the nearest station (in
	// degrees)". Typical values: [0.4, 7.1].
	Dmin float32 `protobuf:"fixed32,15,opt,name=dmin,proto3" json:"dmin,omitempty"`
	// USGS docs: "The root-mean-square (RMS) travel time residual, in sec, using all
	// weights". Typical values: [0.13,1.39].
	Rms float32 `protobuf:"fixed32,16,opt,name=rms,proto3" json:"rms,omitempty"`
	// USGS docs: "The largest azimuthal gap between azimuthally adjacent stations (in
	// degrees)"". Typical values: [0.0, 180.0].
	Gap float32 `protobuf:"fixed32,17,opt,name=gap,proto3" json:"gap,omitempty"`
	// USGS docs: "The method or algorithm used to calculate the preferred magnitude for the
	// event". Typical values: “Md”, “Ml”, “Ms”, “Mw”, “Me”, “Mi”, “Mb”, “MLg”.
	// More information:
	// https://www.usgs.gov/natural-hazards/earthquake-hazards/science/magnitude-types?qt-science_center_objects=0#qt-science_center_objects
	MagType string `protobuf:"bytes,18,opt,name=mag_type,json=magType,proto3" json:"mag_type,omitempty"`
	// USGS docs: "Type of seismic event".
	Type Type `protobuf:"varint,19,opt,name=type,proto3,enum=quake.api.v1.Type" json:"type,omitempty"`
}

func (x *EarthquakeDetails) Reset() {
	*x = EarthquakeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarthquakeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarthquakeDetails) ProtoMessage() {}

func (x *EarthquakeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarthquakeDetails.ProtoReflect.Descriptor instead.
func (*EarthquakeDetails) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{2}
}

func (x *EarthquakeDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EarthquakeDetails) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EarthquakeDetails) GetDetailFeedUrl() string {
	if x != nil {
		return x.DetailFeedUrl
	}
	return ""
}

func (x *EarthquakeDetails) GetFelt() int32 {
	if x != nil {
		return x.Felt
	}
	return 0
}

func (x *EarthquakeDetails) GetReportedIntensity() float32 {
	if x != nil {
		return x.ReportedIntensity
	}
	return 0
}

func (x *EarthquakeDetails) GetEstimatedIntensity() float32 {
	if x != nil {
		return x.EstimatedIntensity
	}
	return 0
}

func (x *EarthquakeDetails) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNSPECIFIED
}

func (x *EarthquakeDetails) GetTsunami() bool {
	if x != nil {
		return x.Tsunami
	}
	return false
}

func (x *EarthquakeDetails) GetNetwork() string {
	if x != nil {
		return x.Network
	}
	return ""
}

func (x *EarthquakeDetails) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *EarthquakeDetails) GetIds() string {
	if x != nil {
		return x.Ids
	}
	return ""
}

func (x *EarthquakeDetails) GetSources() string {
	if x != nil {
		return x.Sources
	}
	return ""
}

func (x *EarthquakeDetails) GetProductTypes() string {
	if x != nil {
		return x.ProductTypes
	}
	return ""
}

func (x *EarthquakeDetails) GetNst() int32 {
	if x != nil {
		return x.Nst
	}
	return 0
}

func (x *EarthquakeDetails) GetDmin() float32 {
	if x != nil {
		return x.Dmin
	}
	return 0
}

func (x *EarthquakeDetails) GetRms() float32 {
	if x != nil {
		return x.Rms
	}
	return 0
}

func (x *EarthquakeDetails) GetGap() float32 {
	if x != nil {
		return x.Gap
	}
	return 0
}

func (x *EarthquakeDetails) GetMagType() string {
	if x != nil {
		return x.MagType
	}
	return ""
}

func (x *EarthquakeDetails) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_TYPE_UNSPECIFIED
}

// EarthquakeMetadata contains meta data for a set of earthquakes.
type EarthquakeMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// USGS docs: "Time (seconds) when the feed was most recently updated".
	// Time is UTC time since Unix epoch 1970-01-01T00:00:00Z.
	GeneratedTime int64 `protobuf:"varint,1,opt,name=generated_time,json=generatedTime,proto3" json:"generated_time,omitempty"`
	// USGS docs: "Url of the feed".
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// USGS docs: "The title of the feed". Typical values:
	// “USGS Magnitude 1+ Earthquakes, Past Day”,
	// “USGS Magnitude 4.5+ Earthquakes, Past Month”
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// USGS docs: "Version of API that generated feed".
	Api string `protobuf:"bytes,4,opt,name=api,proto3" json:"api,omitempty"`
	// USGS docs: "Number of earthquakes in feed".
	Count int32 `protobuf:"varint,5,opt,name=count,proto3" json:"count,omitempty"`
	// USGS docs: "HTTP status code of response".
	HttpStatus string `protobuf:"bytes,6,opt,name=http_status,json=httpStatus,proto3" json:"http_status,omitempty"`
}

func (x *EarthquakeMetadata) Reset() {
	*x = EarthquakeMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EarthquakeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EarthquakeMetadata) ProtoMessage() {}

func (x *EarthquakeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EarthquakeMetadata.ProtoReflect.Descriptor instead.
func (*EarthquakeMetadata) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{3}
}

func (x *EarthquakeMetadata) GetGeneratedTime() int64 {
	if x != nil {
		return x.GeneratedTime
	}
	return 0
}

func (x *EarthquakeMetadata) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *EarthquakeMetadata) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *EarthquakeMetadata) GetApi() string {
	if x != nil {
		return x.Api
	}
	return ""
}

func (x *EarthquakeMetadata) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *EarthquakeMetadata) GetHttpStatus() string {
	if x != nil {
		return x.HttpStatus
	}
	return ""
}

// GeoBoundsE7 is a geographic bounding box (WGS84 latitude and longitude
// are in E7 format, height is centimeters with negative values meaning depth).
// The E7 format with 32 bit ints is used to optimize wire transfer.
type GeoBoundsE7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinLatitude  int32 `protobuf:"fixed32,1,opt,name=min_latitude,json=minLatitude,proto3" json:"min_latitude,omitempty"`
	MinLongitude int32 `protobuf:"fixed32,2,opt,name=min_longitude,json=minLongitude,proto3" json:"min_longitude,omitempty"`
	MinHeight    int32 `protobuf:"zigzag32,3,opt,name=min_height,json=minHeight,proto3" json:"min_height,omitempty"`
	MaxLatitude  int32 `protobuf:"fixed32,4,opt,name=max_latitude,json=maxLatitude,proto3" json:"max_latitude,omitempty"`
	MaxLongitude int32 `protobuf:"fixed32,5,opt,name=max_longitude,json=maxLongitude,proto3" json:"max_longitude,omitempty"`
	MaxHeight    int32 `protobuf:"zigzag32,6,opt,name=max_height,json=maxHeight,proto3" json:"max_height,omitempty"`
}

func (x *GeoBoundsE7) Reset() {
	*x = GeoBoundsE7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoBoundsE7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoBoundsE7) ProtoMessage() {}

func (x *GeoBoundsE7) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoBoundsE7.ProtoReflect.Descriptor instead.
func (*GeoBoundsE7) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{4}
}

func (x *GeoBoundsE7) GetMinLatitude() int32 {
	if x != nil {
		return x.MinLatitude
	}
	return 0
}

func (x *GeoBoundsE7) GetMinLongitude() int32 {
	if x != nil {
		return x.MinLongitude
	}
	return 0
}

func (x *GeoBoundsE7) GetMinHeight() int32 {
	if x != nil {
		return x.MinHeight
	}
	return 0
}

func (x *GeoBoundsE7) GetMaxLatitude() int32 {
	if x != nil {
		return x.MaxLatitude
	}
	return 0
}

func (x *GeoBoundsE7) GetMaxLongitude() int32 {
	if x != nil {
		return x.MaxLongitude
	}
	return 0
}

func (x *GeoBoundsE7) GetMaxHeight() int32 {
	if x != nil {
		return x.MaxHeight
	}
	return 0
}

// GeoPointE7 is a geographic point (WGS84 latitude and longitude are
// in E7 format and height is centimeters with negative values meaning depth).
// The E7 format with 32 bit ints is used to optimize wire transfer.
type GeoPointE7 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  int32 `protobuf:"fixed32,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude int32 `protobuf:"fixed32,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Height    int32 `protobuf:"zigzag32,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GeoPointE7) Reset() {
	*x = GeoPointE7{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quake_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoPointE7) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoPointE7) ProtoMessage() {}

func (x *GeoPointE7) ProtoReflect() protoreflect.Message {
	mi := &file_quake_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoPointE7.ProtoReflect.Descriptor instead.
func (*GeoPointE7) Descriptor() ([]byte, []int) {
	return file_quake_proto_rawDescGZIP(), []int{5}
}

func (x *GeoPointE7) GetLatitude() int32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoPointE7) GetLongitude() int32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoPointE7) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

var File_quake_proto protoreflect.FileDescriptor

var file_quake_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x71,
	0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0xbd, 0x01, 0x0a, 0x14,
	0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x45, 0x37, 0x52, 0x06, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b,
	0x65, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xf0, 0x02, 0x0a, 0x0a,
	0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x71,
	0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x37, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x67, 0x6e, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74,
	0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x52, 0x05, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0xa5,
	0x04, 0x0a, 0x11, 0x45, 0x61, 0x72, 0x74, 0x68, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x5f, 0x66, 0x65, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x46, 0x65, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x66, 0x65, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x65,
	0x6c, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74,
	0x79, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x74, 0x73, 0x75, 0x6e, 0x61, 0x6d, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x10, 0x0a, 0x03, 0x72, 0x6d, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x72, 0x6d,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x67, 0x61, 0x70, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x61, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71,
	0x75, 0x61, 0x6b, 0x65, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xac, 0x01, 0x0a, 0x12, 0x45, 0x61, 0x72, 0x74, 0x68,
	0x71, 0x75, 0x61, 0x6b, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a,
	0x0e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x70, 0x69, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x70, 0x69, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x74, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x45, 0x37, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x61, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f, 0x52,
	0x0c, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0f, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6e, 0x67, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x22, 0x5e, 0x0a, 0x0a, 0x47, 0x65, 0x6f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x45,
	0x37, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0f,
	0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x68, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x2a, 0x62, 0x0a, 0x05, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x52, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x52, 0x41, 0x4e,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x59, 0x45,
	0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f,
	0x47, 0x52, 0x45, 0x45, 0x4e, 0x10, 0x04, 0x2a, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x42, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45,
	0x41, 0x52, 0x54, 0x48, 0x51, 0x55, 0x41, 0x4b, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x52, 0x59, 0x10, 0x02, 0x42, 0x03, 0x5a, 0x01,
	0x2e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quake_proto_rawDescOnce sync.Once
	file_quake_proto_rawDescData = file_quake_proto_rawDesc
)

func file_quake_proto_rawDescGZIP() []byte {
	file_quake_proto_rawDescOnce.Do(func() {
		file_quake_proto_rawDescData = protoimpl.X.CompressGZIP(file_quake_proto_rawDescData)
	})
	return file_quake_proto_rawDescData
}

var file_quake_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_quake_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_quake_proto_goTypes = []interface{}{
	(Alert)(0),                   // 0: quake.api.v1.Alert
	(Status)(0),                  // 1: quake.api.v1.Status
	(Type)(0),                    // 2: quake.api.v1.Type
	(*EarthquakeCollection)(nil), // 3: quake.api.v1.EarthquakeCollection
	(*Earthquake)(nil),           // 4: quake.api.v1.Earthquake
	(*EarthquakeDetails)(nil),    // 5: quake.api.v1.EarthquakeDetails
	(*EarthquakeMetadata)(nil),   // 6: quake.api.v1.EarthquakeMetadata
	(*GeoBoundsE7)(nil),          // 7: quake.api.v1.GeoBoundsE7
	(*GeoPointE7)(nil),           // 8: quake.api.v1.GeoPointE7
}
var file_quake_proto_depIdxs = []int32{
	6, // 0: quake.api.v1.EarthquakeCollection.metadata:type_name -> quake.api.v1.EarthquakeMetadata
	7, // 1: quake.api.v1.EarthquakeCollection.bounds:type_name -> quake.api.v1.GeoBoundsE7
	4, // 2: quake.api.v1.EarthquakeCollection.features:type_name -> quake.api.v1.Earthquake
	8, // 3: quake.api.v1.Earthquake.position:type_name -> quake.api.v1.GeoPointE7
	0, // 4: quake.api.v1.Earthquake.alert:type_name -> quake.api.v1.Alert
	5, // 5: quake.api.v1.Earthquake.details:type_name -> quake.api.v1.EarthquakeDetails
	1, // 6: quake.api.v1.EarthquakeDetails.status:type_name -> quake.api.v1.Status
	2, // 7: quake.api.v1.EarthquakeDetails.type:type_name -> quake.api.v1.Type
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_quake_proto_init() }
func file_quake_proto_init() {
	if File_quake_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quake_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarthquakeCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quake_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Earthquake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quake_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarthquakeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quake_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EarthquakeMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quake_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoBoundsE7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quake_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoPointE7); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quake_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_quake_proto_goTypes,
		DependencyIndexes: file_quake_proto_depIdxs,
		EnumInfos:         file_quake_proto_enumTypes,
		MessageInfos:      file_quake_proto_msgTypes,
	}.Build()
	File_quake_proto = out.File
	file_quake_proto_rawDesc = nil
	file_quake_proto_goTypes = nil
	file_quake_proto_depIdxs = nil
}
